#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "msp.h"
#include "driverlib.h"
#include "simplelink.h"
#include "sl_common.h"
#include "MQTTClient.h"

#include "../inc/Clock.h" //
#include "../inc/I2CB1.h" //
#include "../inc/CortexM.h" //
#include "../inc/LPF.h" //
#include "../inc/opt3101.h" //
#include "../inc/LaunchPad.h" //
#include "../inc/Bump.h" //
//#include "../inc/Motor.h"
#include "../inc/UART0.h" //
#include "../inc/SSD1306.h" //
#include "../inc/FFT.h" //
#include "../inc/motorDriver.h" //
#include "../inc/odometry.h" //
#include "../inc/Tachometer.h" //
#include "../inc/SysTickInts.h" //
#include "../inc/TimerA1.h" //


void PORT4_IRQHandler(void);

// Select one of the following three output possibilities
// define USENOKIA
#define USEOLED 1
//#define USEUART

#ifdef USENOKIA
// this batch configures for LCD
#include "../inc/Nokia5110.h"
#define Init Nokia5110_Init
#define Clear Nokia5110_Clear
#define SetCursor Nokia5110_SetCursor
#define OutString Nokia5110_OutString
#define OutChar Nokia5110_OutChar
#define OutUDec Nokia5110_OutUDec
#define OutSDec Nokia5110_OutSDec
#endif

#ifdef USEOLED
// this batch configures for OLED

void OLEDinit(void){SSD1306_Init(SSD1306_SWITCHCAPVCC);}
#define Init OLEDinit
#define Clear SSD1306_Clear
#define SetCursor SSD1306_SetCursor
#define OutChar SSD1306_OutChar
#define OutString SSD1306_OutString
#define OutUDec SSD1306_OutUDec
#define OutSDec SSD1306_OutSDec
#endif

#ifdef USEUART
// this batch configures for UART link to PC
#include "../inc/UART0.h"
void UartSetCur(uint8_t newX, uint8_t newY){
  if(newX == 6){
    UART0_OutString("\n\rTxChannel= ");
    UART0_OutUDec(newY-1);
    UART0_OutString(" Distance= ");
  }else{
    UART0_OutString("\n\r");
  }
}
void UartClear(void){UART0_OutString("\n\r");};
#define Init UART0_Init
#define Clear UartClear
#define SetCursor UartSetCur
#define OutString UART0_OutString
#define OutChar UART0_OutChar
#define OutUDec UART0_OutUDec
#define OutSDec UART0_OutSDec
#endif


uint32_t Distances[3];
uint32_t FilteredDistances[3];
uint32_t Amplitudes[3];
uint32_t Noises[3];
uint32_t TxChannel;
uint32_t StartTime;
uint32_t TimeToConvert; // in msec
bool pollDistanceSensor(void){
  if(OPT3101_CheckDistanceSensor()){
    TxChannel = OPT3101_GetMeasurement(Distances,Amplitudes);
    return true;
  }
  return false;
}

// calibrated for 500mm track
// right is raw sensor data from right sensor
// return calibrated distance from center of Robot to right wall
int32_t Right(int32_t right){
  return  (right*(59*right + 7305) + 2348974)/32768;
}
// left is raw sensor data from left sensor
// return calibrated distance from center of Robot to left wall
int32_t Left(int32_t left){
  return (1247*left)/2048 + 22;
}
// assumes track is 500mm
int32_t Mode=0; // 0 stop, 1 run
int32_t Error;
int32_t Error_prior = 0;
int32_t Ki= 0;  // integral controller gain
int32_t Kp= 4;  // proportional controller gain //was 4  //Decent values => Kd = 200, Kp = 50 or both 100
int32_t Kd = 100; //Derivative was 100
int32_t UR, UL;  // PWM duty 0 to 14,998

#define TOOCLOSE 200 //was 200
#define DESIRED 500 //was 250
int32_t SetPoint = 500; // mm //was 250
int32_t LeftDistance,CenterDistance,RightDistance; //mm
#define TOOFAR 575 // was 400

#define PWMNOMINAL 10500 // was 2500 -> 7500 wordks best at 9000
#define SWING 1000 //was 1000
#define PWMMIN (PWMNOMINAL-SWING)
#define PWMMAX (PWMNOMINAL+SWING)

void Controller(void){ // runs at 100 Hz
  if(Mode){
    if((LeftDistance>DESIRED)&&(RightDistance>DESIRED)){
      SetPoint = (LeftDistance+RightDistance)/2;
    }else{
      SetPoint = DESIRED;
    }
    if(LeftDistance < RightDistance ){
      Error = LeftDistance-SetPoint;
    }else {
      Error = SetPoint-RightDistance;
    }
 //   UR = UR + Ki*Error;      // adjust right motor
    UR = PWMNOMINAL+Kp*Error; // proportional control
    UL = PWMNOMINAL-Kp*Error; // proportional control
    if(UR < (PWMNOMINAL-SWING)) UR = PWMNOMINAL-SWING; // 3,000 to 7,000
    if(UR > (PWMNOMINAL+SWING)) UR = PWMNOMINAL+SWING;
    if(UL < (PWMNOMINAL-SWING)) UL = PWMNOMINAL-SWING; // 3,000 to 7,000
    if(UL > (PWMNOMINAL+SWING)) UL = PWMNOMINAL+SWING;
    //Motor_Forward(UL,UR);

  }
}
void Controller_Right(void){ // runs at 100 Hz
  if(Mode){
    if((RightDistance>DESIRED)){
      SetPoint = (RightDistance)/2;
    }else{
      SetPoint = DESIRED;
    }
    /*if(LeftDistance < RightDistance ){
      Error = LeftDistance-SetPoint;
    }else {
      Error = SetPoint-RightDistance;
    }*/

    Error = SetPoint - RightDistance;
    //UL = UL + Ki*Error;      // adjust right motor
    UR = PWMNOMINAL+Kp*Error; // proportional control
    UR = UR + Kd*(Error-Error_prior); //derivative control
    UR = UR + Ki*Error;      // adjust right motor
    UL = PWMNOMINAL-Kp*Error; // proportional control

    Error_prior = Error;

    if(UR < (PWMNOMINAL-SWING)) UR = PWMNOMINAL-SWING; // 3,000 to 7,000
    if(UR > (PWMNOMINAL+SWING)) UR = PWMNOMINAL+SWING;
    if(UL < (PWMNOMINAL-SWING)) UL = PWMNOMINAL-SWING; // 3,000 to 7,000
    if(UL > (PWMNOMINAL+SWING)) UL = PWMNOMINAL+SWING;

    //turns left if the center measurement and right measurement is small enough that we will hit the wall if we don't turn
    if((RightDistance < 250) && (CenterDistance < 250)){
        UL = 0;
        UR = PWMNOMINAL;
    }
    //Turn left
   /* if(RightDistance < TOOCLOSE){
        UL = PWMNOMINAL/2;
        UR = PWMNOMINAL;
    }*/

    //turns left if the center measurement is small enough that we will hit the wall if we don't turn
    if(CenterDistance < 250){
        UL = 0;
        UR = PWMNOMINAL;
    }
    //Slight Left
    else if(CenterDistance < 300){
        UL = PWMNOMINAL/2;
        UR = PWMNOMINAL;
    }
    //Sharper Turns - Turn Right
    if ((RightDistance > TOOFAR+50) && (CenterDistance > TOOFAR)){
        UL = PWMNOMINAL;
        UR = PWMNOMINAL/2;
    }
    //Hard Left
    if(LeftDistance < 325){ //200 min
        UL = 0;
        UR = PWMMAX;
    }

    PWM_RightMotor(UR);
    PWM_LeftMotor(UL);
    UpdatePosition();
  }
}

void Controller_Left(void){ // runs at 100 Hz
  if(Mode){
    if((LeftDistance>DESIRED)){
      SetPoint = (LeftDistance)/2;
    }else{
      SetPoint = DESIRED;
    }
    /*if(LeftDistance < RightDistance ){
      Error = LeftDistance-SetPoint;
    }else {
      Error = SetPoint-RightDistance;
    }*/

    Error = SetPoint - LeftDistance;
    //UL = UL + Ki*Error;      // adjust right motor
    UL = PWMNOMINAL+Kp*Error; // proportional control
    UL = UL + Kd*(Error-Error_prior); //derivative control
    UL = UL + Ki*Error;      // adjust right motor
    UR = PWMNOMINAL-Kp*Error; // proportional control

    Error_prior = Error;

    if(UL < (PWMNOMINAL-SWING)) UL = PWMNOMINAL-SWING; // 3,000 to 7,000
    if(UL > (PWMNOMINAL+SWING)) UL = PWMNOMINAL+SWING;
    if(UR < (PWMNOMINAL-SWING)) UR = PWMNOMINAL-SWING; // 3,000 to 7,000
    if(UR > (PWMNOMINAL+SWING)) UR = PWMNOMINAL+SWING;

    //turns right if the center measurement and right measurement is small enough that we will hit the wall if we don't turn
    if((LeftDistance < 250) && (CenterDistance < 250)){
        UR = 0;
        UL = PWMNOMINAL;
    }
    //Turn left
   /* if(RightDistance < TOOCLOSE){
        UL = PWMNOMINAL/2;
        UR = PWMNOMINAL;
    }*/

    //turns right if the center measurement is small enough that we will hit the wall if we don't turn
    if(CenterDistance < 250){
        UR = 0;
        UL = PWMNOMINAL;
    }
    //Slight Right
    else if(CenterDistance < 300){
        UR = PWMNOMINAL/2;
        UL = PWMNOMINAL;
    }
    //Sharper Turns - Turn Left
    if ((LeftDistance > TOOFAR+50) && (CenterDistance > TOOFAR)){
        UR = PWMNOMINAL;
        UL = PWMNOMINAL/2;
    }
    //Hard Right
    if(RightDistance < 275){ //200 min
        UR = 0;
        UL = PWMMAX;
    }

    PWM_RightMotor(UR);
    PWM_LeftMotor(UL);
  }
}

/*
void Pause(void){int i;
  while(Bump_Read() != 0xED){ // wait for release
    Clock_Delay1ms(200); LaunchPad_Output(0); // off
    Clock_Delay1ms(200); LaunchPad_Output(1); // red
  }
  while(Bump_Read() == 0xED){// wait for touch
    Clock_Delay1ms(100); LaunchPad_Output(0); // off
    Clock_Delay1ms(100); LaunchPad_Output(3); // red/green
  }
  while(Bump_Read() != 0xED){ // wait for release
    Clock_Delay1ms(100); LaunchPad_Output(0); // off
    Clock_Delay1ms(100); LaunchPad_Output(4); // blue
  }
  for(i=1000;i>100;i=i-200){
    Clock_Delay1ms(i); LaunchPad_Output(0); // off
    Clock_Delay1ms(i); LaunchPad_Output(2); // green
  }
  // restart Jacki
  UR = UL = PWMNOMINAL;    // reset parameters
  Mode = 1;
}*/
void Pause(void){

    //wait 1 second
    LaunchPad_Output(0);
    LaunchPad_Output(1);
    Clock_Delay1ms(1000);
    LaunchPad_Output(0);

  // restart Jacki
  UR = UL = PWMNOMINAL;    // reset parameters
  Mode = 1;
}

void PORT4_IRQHandler(void)
{
    //Get which bumper was pressed
    uint8_t input = Bump_Read();
    Mode = 0;
    Motor_Stop();
    Pause();
    PWM_LeftMotorBackwards(8000);
    PWM_RightMotorBackwards(2000);
    Clock_Delay1ms(800);
    Motor_Stop();
    //currentState = Stop;

    //Reset the flag
    P4->IFG &= input;
    Mode = 1;
    //cont = 0;
}


//For tachometry
/*
enum RobotState Action;
uint16_t LeftTach;             // tachometer period of left wheel (number of 0.0833 usec cycles to rotate 1/360 of a wheel rotation)
enum TachDirection LeftDir;    // direction of left rotation (FORWARD, STOPPED, REVERSE)
int32_t LeftSteps;             // number of tachometer steps of left wheel (units of 220/360 = 0.61 mm traveled)
int32_t LastLeftSteps;         // number of tachometer steps of left wheel (units of 220/360 = 0.61 mm traveled)
int32_t TotalLeftSteps;        // number of tachometer steps of left wheel (units of 220/360 = 0.61 mm traveled)
uint16_t RightTach;            // tachometer period of right wheel (number of 0.0833 usec cycles to rotate 1/360 of a wheel rotation)
enum TachDirection RightDir;   // direction of right rotation (FORWARD, STOPPED, REVERSE)
int32_t RightSteps;            // number of tachometer steps of right wheel (units of 220/360 = 0.61 mm traveled)
int32_t LastRightSteps;        // number of tachometer steps of right wheel (units of 220/360 = 0.61 mm traveled)
int32_t TotalRightSteps;       // number of tachometer steps of right wheel (units of 220/360 = 0.61 mm traveled)
int32_t MyX,MyY;               // position in 0.0001cm
int32_t MyTheta;               // direction units 2*pi/16384 radians (-pi to +pi)
int32_t Error; // in 0.0001cm or in 2*pi/16384 radians
*/
//For odometry
extern int32_t MyX,MyY;               // position in 0.0001cm
extern int32_t MyTheta;               // direction units 2*pi/16384 radians (-pi to +pi)
extern enum RobotState Action;
uint32_t result;

//For tachometry
uint16_t avg(uint16_t *array, int length)
{
  int i;
  uint32_t sum = 0;

  for(i=0; i<length; i=i+1)
  {
    sum = sum + array[i];
  }
  return (sum/length);
}

int32_t t;
uint16_t ActualL;                        // actual rotations per minute
uint16_t ActualR;
#define TACHBUFF 10                      // number of elements in tachometer array
uint16_t LeftTach2[TACHBUFF];             // tachometer period of left wheel (number of 0.0833 usec cycles to rotate 1/360 of a wheel rotation)
enum TachDirection LeftDir2;              // direction of left rotation (FORWARD, STOPPED, REVERSE)
int32_t LeftSteps2;                       // number of tachometer steps of left wheel (units of 220/360 = 0.61 mm traveled)
uint16_t RightTach2[TACHBUFF];            // tachometer period of right wheel (number of 0.0833 usec cycles to rotate 1/360 of a wheel rotation)
enum TachDirection RightDir2;             // direction of right rotation (FORWARD, STOPPED, REVERSE)
int32_t RightSteps2;                     // number of tachometer steps of right wheel (units of 220/360 = 0.61 mm traveled)




//******************************* Init AMANDA ***************************************************

#define SSID_NAME       "Amanda"       /* Access point name to connect to. */
#define SEC_TYPE        SL_SEC_TYPE_WPA_WPA2     /* Security type of the Access piont */
#define PASSKEY         "amandawalker"   /* Password in case of secure AP */
#define PASSKEY_LEN     pal_Strlen(PASSKEY)  /* Password length in case of secure AP */
#define MQTT_BROKER_SERVER  "broker.hivemq.com"
#define SUBSCRIBE_TOPIC "amw286"
#define PUBLISH_TOPIC "amw"
// MQTT message buffer size
#define BUFF_SIZE 32
#define APPLICATION_VERSION "1.0.0"
#define MCLK_FREQUENCY 48000000
#define PWM_PERIOD 255
#define SL_STOP_TIMEOUT        0xFF
#define SMALL_BUF           32
#define MAX_SEND_BUF_SIZE   512
#define MAX_SEND_RCV_SIZE   1024
/* Application specific status/error codes */
typedef enum{
    DEVICE_NOT_IN_STATION_MODE = -0x7D0,        /* Choosing this number to avoid overlap with host-driver's error codes */
    HTTP_SEND_ERROR = DEVICE_NOT_IN_STATION_MODE - 1,
    HTTP_RECV_ERROR = HTTP_SEND_ERROR - 1,
    HTTP_INVALID_RESPONSE = HTTP_RECV_ERROR -1,
    STATUS_CODE_MAX = -0xBB8
}e_AppStatusCodes;

#define min(X,Y) ((X) < (Y) ? (X) : (Y))
volatile unsigned int S1buttonDebounce = 0;
volatile unsigned int S2buttonDebounce = 0;
volatile int publishID = 1;
unsigned char macAddressVal[SL_MAC_ADDR_LEN];
unsigned char macAddressLen = SL_MAC_ADDR_LEN;
char macStr[18];        // Formatted MAC Address String
char uniqueID[9];       // Unique ID generated from TLV RAND NUM and MAC Address
Network n;
Client hMQTTClient;     // MQTT Client
_u32  g_Status = 0;
struct{
    _u8 Recvbuff[MAX_SEND_RCV_SIZE];
    _u8 SendBuff[MAX_SEND_BUF_SIZE];
    _u8 HostName[SMALL_BUF];
    _u8 CityName[SMALL_BUF];
    _u32 DestinationIP;
    _i16 SockID;
}g_AppData;
static _i32 establishConnectionWithAP();
static _i32 configureSimpleLinkToDefaultState();
static _i32 initializeAppVariables();
static void displayBanner();
static void messageArrived(MessageData*);
static void generateUniqueID();
void SimpleLinkWlanEventHandler(SlWlanEvent_t *pWlanEvent)
{
    if(pWlanEvent == NULL)
        CLI_Write(" [WLAN EVENT] NULL Pointer Error \n\r");
    switch(pWlanEvent->Event)
    {
        case SL_WLAN_CONNECT_EVENT:
        {
            SET_STATUS_BIT(g_Status, STATUS_BIT_CONNECTION);
        }
        break;

        case SL_WLAN_DISCONNECT_EVENT:
        {
            slWlanConnectAsyncResponse_t*  pEventData = NULL;
            CLR_STATUS_BIT(g_Status, STATUS_BIT_CONNECTION);
            CLR_STATUS_BIT(g_Status, STATUS_BIT_IP_ACQUIRED);
            pEventData = &pWlanEvent->EventData.STAandP2PModeDisconnected;
            /* If the user has initiated 'Disconnect' request, 'reason_code' is SL_USER_INITIATED_DISCONNECTION */
            if(SL_USER_INITIATED_DISCONNECTION == pEventData->reason_code)
            {
                CLI_Write(" Device disconnected from the AP on application's request \n\r");
            }
            else
            {
                CLI_Write(" Device disconnected from the AP on an ERROR..!! \n\r");
            }
        }
        break;
        default:
        {
            CLI_Write(" [WLAN EVENT] Unexpected event \n\r");
        }
        break;
    }
}


void SimpleLinkNetAppEventHandler(SlNetAppEvent_t *pNetAppEvent)
{
    if(pNetAppEvent == NULL)
        CLI_Write(" [NETAPP EVENT] NULL Pointer Error \n\r");
    switch(pNetAppEvent->Event)
    {
        case SL_NETAPP_IPV4_IPACQUIRED_EVENT:
        {
            SET_STATUS_BIT(g_Status, STATUS_BIT_IP_ACQUIRED);

        }
        break;

        default:
        {
            CLI_Write(" [NETAPP EVENT] Unexpected event \n\r");
        }
        break;
    }
}

void SimpleLinkHttpServerCallback(SlHttpServerEvent_t *pHttpEvent,
                                  SlHttpServerResponse_t *pHttpResponse)
{
    CLI_Write(" [HTTP EVENT] Unexpected event \n\r");
}

void SimpleLinkGeneralEventHandler(SlDeviceEvent_t *pDevEvent)
{
    CLI_Write(" [GENERAL EVENT] \n\r");
}

void SimpleLinkSockEventHandler(SlSockEvent_t *pSock)
{
    if(pSock == NULL)
        CLI_Write(" [SOCK EVENT] NULL Pointer Error \n\r");

    switch( pSock->Event )
    {
        case SL_SOCKET_TX_FAILED_EVENT:
        {

            switch( pSock->EventData.status )
            {
                case SL_ECLOSE:
                    CLI_Write(" [SOCK EVENT] Close socket operation failed to transmit all queued packets\n\r");
                break;


                default:
                    CLI_Write(" [SOCK EVENT] Unexpected event \n\r");
                break;
            }
        }
        break;

        default:
            CLI_Write(" [SOCK EVENT] Unexpected event \n\r");
        break;
    }
}









void main(void){ // wallFollow wall following implementation
  int i = 0;
  int j = 0;
  t = 0;
  uint32_t channel = 1;
  uint32_t xPos,yPos,headAngle;
  xPos = 0;
  yPos = 0;
  headAngle = 0;
  DisableInterrupts();
  Clock_Init48MHz();
  UART0_Initprintf(); // BAUD Rate = 115,200 bps
  printf("\n\rOdometry Test\n\r");
  Bump_Init();
  LaunchPad_Init(); // built-in switches and LEDs
  motorPWMInit(15000,0,0);
  Odometry_Init(0,0,NORTH);
  Tachometer_Init();
  TimerA1_Init(&UpdatePosition,20000); // every 40ms
  UART0_Init(); // AMANDA added
  Mode = 1;
  I2CB1_Init(30); // baud rate = 12MHz/30=400kHz
  Init();
  OPT3101_Init();
  OPT3101_Setup();
  OPT3101_CalibrateInternalCrosstalk();
  OPT3101_ArmInterrupts(&TxChannel, Distances, Amplitudes);
  TxChannel = 3;
  OPT3101_StartMeasurementChannel(channel);
  LPF_Init(100,8);
  LPF_Init2(100,8);
  LPF_Init3(100,8);
  UR = UL = PWMNOMINAL; //initial power
  //Pause();
  EnableInterrupts();





  // *********************** AMANDA main code **********************
  _i32 retVal = -1;
  retVal = initializeAppVariables();
  //ASSERT_ON_ERROR(retVal);
  /* Stop WDT and initialize the system-clock of the MCU */
  stopWDT();
  initClk();
  CLI_Configure();
  displayBanner();
  retVal = configureSimpleLinkToDefaultState();
  if(retVal < 0)
  {
      if (DEVICE_NOT_IN_STATION_MODE == retVal)
          CLI_Write(" Failed to configure the device in its default state \n\r");
      LOOP_FOREVER();
  }

  CLI_Write(" Device is configured in default state \n\r");
  retVal = sl_Start(0, 0, 0);
  if ((retVal < 0) ||
      (ROLE_STA != retVal) )
  {
      CLI_Write(" Failed to start the device \n\r");
      LOOP_FOREVER();
  }
  CLI_Write(" Device started as STATION \n\r");
  /* Connecting to WLAN AP */
  retVal = establishConnectionWithAP();
  if(retVal < 0)
  {
      CLI_Write(" Failed to establish connection w/ an AP \n\r");
      LOOP_FOREVER();
  }
  CLI_Write(" Connection established w/ AP and IP is acquired \n\r");
  // Obtain MAC Address
  sl_NetCfgGet(SL_MAC_ADDRESS_GET,NULL,&macAddressLen,(unsigned char *)macAddressVal);
  // Print MAC Addres to be formatted string
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
          macAddressVal[0], macAddressVal[1], macAddressVal[2], macAddressVal[3], macAddressVal[4], macAddressVal[5]);
  // Generate 32bit unique ID from TLV Random Number and MAC Address
  generateUniqueID();
  int rc = 0;
  unsigned char buf[100];
  unsigned char readbuf[100];
  NewNetwork(&n);
  rc = ConnectNetwork(&n, MQTT_BROKER_SERVER, 1883);
  if (rc != 0) {
      CLI_Write(" Failed to connect to MQTT broker \n\r");
      LOOP_FOREVER();
  }
  CLI_Write(" Connected to MQTT broker \n\r");
  MQTTClient(&hMQTTClient, &n, 1000, buf, 100, readbuf, 100);
  MQTTPacket_connectData cdata = MQTTPacket_connectData_initializer;
  cdata.MQTTVersion = 3;
  cdata.clientID.cstring = uniqueID;
  rc = MQTTConnect(&hMQTTClient, &cdata);
  if (rc != 0) {
      CLI_Write(" Failed to start MQTT client \n\r");
      LOOP_FOREVER();
  }
  CLI_Write(" Started MQTT client successfully \n\r");
  rc = MQTTSubscribe(&hMQTTClient, SUBSCRIBE_TOPIC, QOS0, messageArrived);
  if (rc != 0) {
      CLI_Write(" Failed to subscribe to /msp/cc3100/demo topic \n\r");
      LOOP_FOREVER();
  }
  CLI_Write(" Subscribed to /msp/cc3100/demo topic \n\r");
  rc = MQTTSubscribe(&hMQTTClient, uniqueID, QOS0, messageArrived);
  if (rc != 0) {
      CLI_Write(" Failed to subscribe to uniqueID topic \n\r");
      LOOP_FOREVER();
  }
  CLI_Write(" Subscribed to uniqueID topic \n\r");


 char status;

  while(1){
  /*if(Bump_Read() != 0xED){ // collision
       Mode = 0;
       Motor_Stop();
       Pause();
    }*/
     /*if (Bump_Read() != 0xED){
        Mode = 0;
        Motor_Stop();
        Pause();
        PWM_LeftMotorBackwards(8000);
        PWM_RightMotorBackwards(2000);
        Clock_Delay1ms(800);
     }*/
    if(TxChannel <= 2){ // 0,1,2 means new data
      if(TxChannel==0){
        if(Amplitudes[0] > 1000){
          LeftDistance = FilteredDistances[0] = Left(LPF_Calc(Distances[0]));
        }else{
          LeftDistance = FilteredDistances[0] = 1000;
        }
      }else if(TxChannel==1){
        if(Amplitudes[1] > 1000){
          CenterDistance = FilteredDistances[1] = LPF_Calc2(Distances[1]);
        }else{
          CenterDistance = FilteredDistances[1] = 1000;
        }
      }else {
        if(Amplitudes[2] > 1000){
          RightDistance = FilteredDistances[2] = Right(LPF_Calc3(Distances[2]));
        }else{
          RightDistance = FilteredDistances[2] = 1000;
        }
      }
      TxChannel = 3; // 3 means no data
      channel = (channel+1)%3;
      OPT3101_StartMeasurementChannel(channel);
      i = i + 1;
    }
    Controller_Right();
    Tachometer_Get(&LeftTach2[j], &LeftDir2, &LeftSteps2, &RightTach2[j], &RightDir2, &RightSteps2);
    //Controller_Left();
    //Update Position
    //UpdatePosition();
    j = j + 1;

    if(j >= TACHBUFF)
    {

      //This section of the code checks the wheel state every second (10*100ms)
      j = 0;

      //Sense state of wheels (in RPM) and take the average of the last n values
      // (1/tach step/cycles) * (12,000,000 cycles/sec) * (60 sec/min) * (1/360 rotation/step)
      ActualL = 2000000/avg(LeftTach2, TACHBUFF);
      ActualR = 2000000/avg(RightTach2, TACHBUFF);
      //Get Readings & Convert
      xPos = Odometry_GetX();//*.0001;
      yPos = Odometry_GetY();//*.0001;
      headAngle = Odometry_GetAngle();//*360/16384;
      /*
      //Calculate Error signals
      Error_L = DesiredL - ActualL;
      Error_R = DesiredR - ActualR;

       DL = Kd*(Error_L-Error_L_prior)*1024;
       DR = Kd*(Error_R-Error_R_prior)*1024;

       //PID Control Law
       //Initially, only the I-term is implemented, you must add the P and D terms.
       UL = UL + Kp*Error_L + DL + (Ki*Error_L/1024);  // adjust left motor
       UR = UR + Kp*Error_R + DR + (Ki*Error_R/1024);  // adjust right motor

       PWM_RightMotor(UR);
       PWM_LeftMotor(UL);
    */
      printf("\nt = %d ms\n\r",t);
      //printf("%5d Target RPM(Left)  %5d Target RPM(Right)\n\r",DesiredL,DesiredR);
      printf("X-Position =%5d cm | Y-Position =%5d cm\n\r",xPos,yPos);
      printf("Head Angle =%5d deg\n\r",headAngle);
      printf("%5d Actual RPM(Left)  %5d Actual RPM(Right)\n\r",ActualL,ActualR);
      /*
      printf("%5d Error  RPM(Left)  %5d Error  RPM(Right)\n\r",Error_L,Error_R);
      Error_L_prior = Error_L;
      Error_R_prior = Error_R;*/

    }
    //Clock_Delay1ms(100); // delay ~0.1 sec at 48 MHz
    t = t + 100; // keep track of timer

    if(i >= 100){
      i = 0;
    }
    WaitForInterrupt();
  }
}








// ************************ AMANDA post main functions*****************************
static void generateUniqueID() {
    CRC32_setSeed(TLV->RANDOM_NUM_1, CRC32_MODE);
    CRC32_set32BitData(TLV->RANDOM_NUM_2);
    CRC32_set32BitData(TLV->RANDOM_NUM_3);
    CRC32_set32BitData(TLV->RANDOM_NUM_4);
    int i;
    for (i = 0; i < 6; i++)
    CRC32_set8BitData(macAddressVal[i], CRC32_MODE);

    uint32_t crcResult = CRC32_getResult(CRC32_MODE);
    sprintf(uniqueID, "%06X", crcResult);
}


static void messageArrived(MessageData* data) {
    return;
}
static _i32 configureSimpleLinkToDefaultState()
{
    SlVersionFull   ver = {0};
    _WlanRxFilterOperationCommandBuff_t  RxFilterIdMask = {0};

    _u8           val = 1;
    _u8           configOpt = 0;
    _u8           configLen = 0;
    _u8           power = 0;
    _i32          retVal = -1;
    _i32          mode = -1;
    mode = sl_Start(0, 0, 0);
    ASSERT_ON_ERROR(mode);
    /* If the device is not in station-mode, try configuring it in station-mode */
    if (ROLE_STA != mode)
    {
        if (ROLE_AP == mode)
        {
            /* If the device is in AP mode, we need to wait for this event before doing anything */
            while(!IS_IP_ACQUIRED(g_Status)) { _SlNonOsMainLoopTask(); }
        }
        /* Switch to STA role and restart */
        retVal = sl_WlanSetMode(ROLE_STA);
        ASSERT_ON_ERROR(retVal);
        retVal = sl_Stop(SL_STOP_TIMEOUT);
        ASSERT_ON_ERROR(retVal);
        retVal = sl_Start(0, 0, 0);
        ASSERT_ON_ERROR(retVal);
        /* Check if the device is in station again */
        if (ROLE_STA != retVal)
        {
            /* We don't want to proceed if the device is not coming up in station-mode */
            ASSERT_ON_ERROR(DEVICE_NOT_IN_STATION_MODE);
        }
    }
    /* Get the device's version-information */
    configOpt = SL_DEVICE_GENERAL_VERSION;
    configLen = sizeof(ver);
    retVal = sl_DevGet(SL_DEVICE_GENERAL_CONFIGURATION, &configOpt, &configLen, (_u8 *)(&ver));
    ASSERT_ON_ERROR(retVal);
    /* Set connection policy to Auto + SmartConfig (Device's default connection policy) */
    retVal = sl_WlanPolicySet(SL_POLICY_CONNECTION, SL_CONNECTION_POLICY(1, 0, 0, 0, 1), NULL, 0);
    ASSERT_ON_ERROR(retVal);
    /* Remove all profiles */
    retVal = sl_WlanProfileDel(0xFF);
    ASSERT_ON_ERROR(retVal);
    retVal = sl_WlanDisconnect();
    if(0 == retVal)
    {
        /* Wait */
        while(IS_CONNECTED(g_Status)) { _SlNonOsMainLoopTask(); }
    }
    /* Enable DHCP client*/
    retVal = sl_NetCfgSet(SL_IPV4_STA_P2P_CL_DHCP_ENABLE,1,1,&val);
    ASSERT_ON_ERROR(retVal);
    /* Disable scan */
    configOpt = SL_SCAN_POLICY(0);
    retVal = sl_WlanPolicySet(SL_POLICY_SCAN , configOpt, NULL, 0);
    ASSERT_ON_ERROR(retVal);
    /* Set Tx power level for station mode
       Number between 0-15, as dB offset from max power - 0 will set maximum power */
    power = 0;
    retVal = sl_WlanSet(SL_WLAN_CFG_GENERAL_PARAM_ID, WLAN_GENERAL_PARAM_OPT_STA_TX_POWER, 1, (_u8 *)&power);
    ASSERT_ON_ERROR(retVal);
    /* Set PM policy to normal */
    retVal = sl_WlanPolicySet(SL_POLICY_PM , SL_NORMAL_POLICY, NULL, 0);
    ASSERT_ON_ERROR(retVal);
    /* Unregister mDNS services */
    retVal = sl_NetAppMDNSUnRegisterService(0, 0);
    ASSERT_ON_ERROR(retVal);
    /* Remove  all 64 filters (8*8) */
    pal_Memset(RxFilterIdMask.FilterIdMask, 0xFF, 8);
    retVal = sl_WlanRxFilterSet(SL_REMOVE_RX_FILTER, (_u8 *)&RxFilterIdMask,
                       sizeof(_WlanRxFilterOperationCommandBuff_t));
    ASSERT_ON_ERROR(retVal);
    retVal = sl_Stop(SL_STOP_TIMEOUT);
    ASSERT_ON_ERROR(retVal);
    retVal = initializeAppVariables();
    ASSERT_ON_ERROR(retVal);
    return retVal; /* Success */
}

static _i32 establishConnectionWithAP()
{
    SlSecParams_t secParams = {0};
    _i32 retVal = 0;
    secParams.Key = PASSKEY;
    secParams.KeyLen = PASSKEY_LEN;
    secParams.Type = SEC_TYPE;
    retVal = sl_WlanConnect(SSID_NAME, pal_Strlen(SSID_NAME), 0, &secParams, 0);
    ASSERT_ON_ERROR(retVal);
    /* Wait */
    while((!IS_CONNECTED(g_Status)) || (!IS_IP_ACQUIRED(g_Status))) { _SlNonOsMainLoopTask(); }
    return SUCCESS;
}
static _i32 initializeAppVariables()
{
    g_Status = 0;
    pal_Memset(&g_AppData, 0, sizeof(g_AppData));
    return SUCCESS;
}
static void displayBanner()
{
    CLI_Write("\n\r\n\r");
    CLI_Write(" MQTT Twitter Controlled RGB LED - Version ");
    CLI_Write(APPLICATION_VERSION);
    CLI_Write("\n\r*******************************************************************************\n\r");
}

